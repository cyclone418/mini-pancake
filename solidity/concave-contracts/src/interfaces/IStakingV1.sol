// SPDX-License-Identifier: AGPL-3.0-only
pragma solidity >= 0.8.0;

interface IStakingV1 {
  function BONDS() external view returns (address);
  function CNV() external view returns (address);
  function COOP() external view returns (address);
  function URI_ADDRESS() external view returns (address);
  function VALUESHUTTLE() external view returns (address);
  function _calculateCOOPRate(uint256 _value, uint256 _cnvOut) external view returns (uint256);
  function _poolIndex(uint256 _bal, uint256 _supply) external pure returns (uint256);
  function approve(address to, uint256 tokenId) external;
  function apyPerRebase() external view returns (uint256);
  function balanceOf(address owner) external view returns (uint256);
  function circulatingSupply() external view returns (uint256);
  function coopRateMax() external view returns (uint256);
  function coopRatePriceControl() external view returns (uint256);
  function getApproved(uint256 tokenId) external view returns (address);
  function globalExcess() external view returns (uint256);
  function haogegeControl() external view returns (uint256);
  function initialize(address _CNV, address _COOP, address _BONDS, address _VALUESHUTTLE) external;
  function isApprovedForAll(address owner, address operator) external view returns (bool);
  function lastRebaseTime() external view returns (uint256);
  function lock(address to, uint256 input, uint256 pid) external returns (uint256 tokenId);
  function lockPoolsLength() external view returns (uint256);
  function lockWithPermit(address to, uint256 input, uint256 pid, uint256 permitDeadline, uint8 v, bytes32 r, bytes32 s) external returns (uint256 tokenId);
  function manageLockPool(uint256 poolID, uint64 _term, uint256 _g, uint256 _excessRatio) external;
  function manualExcessDistribution(uint256[] memory amounts) external;
  function minPrice() external view returns (uint256);
  function name() external view returns (string memory);
  function openLockPool(uint64 _term, uint256 _g, uint256 _excessRatio) external;
  function owner() external view returns (address);
  function ownerOf(uint256 tokenId) external view returns (address);
  function paused() external view returns (bool);
  function pools(uint256) external view returns (uint64 term, uint256 g, uint256 excessRatio, uint256 balance, uint256 supply, uint256 rewardsPerShare);
  function positions(uint256) external view returns (uint32 poolID, uint224 shares, uint32 maturity, uint224 rewardDebt);
  function rebase() external returns (bool vebase);
  function rebaseIncentive() external view returns (uint256);
  function rebaseInterval() external view returns (uint256);
  function renounceOwnership() external;
  function safeTransferFrom(address from, address to, uint256 tokenId) external;
  function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) external;
  function setAPYPerRebase(uint256 _apy) external;
  function setAddress(uint8 _what, address _address) external;
  function setApprovalForAll(address operator, bool approved) external;
  function setCOOPParameters(uint256 _coopRatePriceControl, uint256 _haogegeControl, uint256 _coopRateMax) external;
  function setMinPrice(uint256 _minPrice) external;
  function setPause(bool _toPause) external;
  function setRebaseIncentive(uint256 _rebaseIncentive) external;
  function setRebaseInterval(uint256 _rebaseInterval) external;
  function supportsInterface(bytes4 interfaceId) external view returns (bool);
  function symbol() external view returns (string memory);
  function tokenURI(uint256 id) external view returns (string memory);
  function totalSupply() external view returns (uint256);
  function transferFrom(address from, address to, uint256 tokenId) external;
  function transferOwnership(address newOwner) external;
  function unlock(address to, uint256 tokenId) external returns (uint256 amountOut);
  function viewStakingCap(uint256 poolNum) external view returns (uint256);
}
